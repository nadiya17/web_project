{"version":3,"sources":["custom/application.js","custom/column.js","custom/main.js","custom/note.js","custom/script.js"],"names":["Application","storageKey","save","object","columns","idCounter","Column","items","notes","Note","document","querySelectorAll","forEach","columnElement","column","id","parseInt","getAttribute","header","querySelector","textContent","noteIds","noteElement","push","note","content","json","JSON","stringify","localStorage","setItem","load","getItem","parse","columnsElement","innerHTML","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","_ref","value","element","append","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","noteId","_getNoteById","find","add","err","return","arguments","length","_classCallCheck","this","instance","createElement","classList","setAttribute","addEventListener","event","focus","headerElement","removeAttribute","dragstart","bind","dragend","dragover","drop","_len","Array","_key","includes","stopPropagation","dragged","remove","dropped","preventDefault","children","from","indexOf","insertBefore","nextElementSibling","$","ready","on","animate","scrollTop","attr","offset","top","click","is","not","prop","trim","dragenter","dragleave","x","parentElement","indexA","indexB","closest"],"mappings":"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","file":"custom-bundle.min.js","sourcesContent":["const Application = {\n    storageKey: 'trelloClone',\n\n    // Сохраняем текущее состоние в локальное хранилище.\n    save() {\n        const object = {\n            columns: {\n                idCounter: Column.idCounter,\n                items: []\n            },\n            notes: {\n                idCounter: Note.idCounter,\n                items: []\n            }\n        }\n// проходимся по всем колонкам и добавляем в массив columns.items\n        document\n            .querySelectorAll('.column')\n            .forEach(columnElement => {\n                const column = {\n                    id: parseInt(columnElement.getAttribute('data-column-id')),\n                    header: columnElement.querySelector('.column-header').textContent,\n                    noteIds: []\n                }\n// запоминаем все id заметок, которые принадлежат колонке\n                columnElement\n                    .querySelectorAll('.note')\n                    .forEach(noteElement => {\n                        column.noteIds.push(parseInt(noteElement.getAttribute('data-note-id')))\n                    })\n// запоминаем колонки\n                object.columns.items.push(column)\n            })\n// Проходим по всем заметкам и добавляем в массив notes.items\n        document\n            .querySelectorAll('.note')\n            .forEach(noteElement => {\n                const note = {\n                    id: parseInt(noteElement.getAttribute('data-note-id')),\n                    content: noteElement.textContent\n                }\n\n                object.notes.items.push(note)\n            })\n// преобразуем object в json\n        const json = JSON.stringify(object)\n        // записываем json в localStorage\n        localStorage.setItem(Application.storageKey, json)\n    },\n\n    // Восстанавливаем текущее состоние из локального хранилища.\n    load() {\n        if (!localStorage.getItem(Application.storageKey)) {\n            return\n        }\n\n        const object = JSON.parse(localStorage.getItem(Application.storageKey))\n        const getNoteById = id => object.notes.items.find(note => note.id === id)\n// точка монтирования\n        const columnsElement = document.querySelector('.columns')\n        columnsElement.innerHTML = ''\n\n        for (const {id, header, noteIds} of object.columns.items) {\n            const column = new Column(id)\n            column.element.querySelector('.column-header').textContent = header\n\n            columnsElement.append(column.element)\n\n            for (const noteId of noteIds) {\n                const {id, content} = getNoteById(noteId)\n                const note = new Note(id, content)\n                column.add(note)\n            }\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// const Application = {\n// \t// сохраняем состояние приложения\n// \tsave () {\n// \t\tconst object = {\n// \t\t\tcolumns: {\n// \t\t\t\tidCounter: Column.idCounter,\n// \t\t\t\titems: []\n// \t\t\t},\n// \t\t\tnotes: {\n// \t\t\t\tidCounter: Note.idCounter,\n// \t\t\t\titems: []\n// \t\t\t}\n// \t\t}\n\n// \t\t// проходимся по всем колонкам и добавляем в массив columns.items\n// \t\tdocument\n// \t\t\t.querySelectorAll('.column')\n// \t\t\t.forEach(columnElement => {\n// \t\t\t\tconst column = {\n// \t\t\t\t\ttitle: columnElement.querySelector('.column-header').textContent,\n// \t\t\t\t\tid: parseInt(columnElement.getAttribute('data-column-id')),\n// \t\t\t\t\tnoteIds: []\n// \t\t\t\t}\n\n// \t\t\t\t// запоминаем все id заметок, которые принадлежат колонке\n// \t\t\t\tcolumnElement\n// \t\t\t\t\t.querySelectorAll('.note')\n// \t\t\t\t\t.forEach(noteElement => {\n// \t\t\t\t\t\tcolumn.noteIds.push(parseInt(noteElement.getAttribute('data-note-id')))\n// \t\t\t\t\t})\n\n// \t\t\t\t// запоминаем колонки\n// \t\t\t\tobject.columns.items.push(column)\n// \t\t\t})\n\n// \t\t// Проходим по всем заметкам и добавляем в массив notes.items\n// \t\tdocument\n// \t\t\t.querySelectorAll('.note')\n// \t\t\t.forEach(noteElement => {\n// \t\t\t\tconst note = {\n// \t\t\t\t\tid: parseInt(noteElement.getAttribute('data-note-id')),\n// \t\t\t\t\tcontent: noteElement.textContent\n// \t\t\t\t}\n\n// \t\t\t\tobject.notes.items.push(note)\n// \t\t\t})\n\n// \t\t// преобразуем object в json\n// \t\tconst json = JSON.stringify(object)\n\n// \t\t// записываем json в localStorage\n// \t\tlocalStorage.setItem('trello', json)\n\t\t\n// \t\treturn object\n// \t},\n\n// \t// Загружаем состояние приложения\n// \tload () {\n\t\t\n// \t\tif (!localStorage.getItem('trello')) {\n// \t\t\treturn\n// \t\t}\n\n// \t\t// точка монтирования\n// \t\tconst mountePoint = document.querySelector('.columns')\n// \t\tmountePoint.innerHTML = ''\n\n// \t\tconst object = JSON.parse(localStorage.getItem('trello'))\n\n// \t\t// забираем из памяти id заметок и колонок\n// \t\tColumn.idCounter = object.columns.idCounter\n// \t\tNote.idCounter = object.notes.idCounter\n\n// \t\t// пробегаемся по заметкам, и если id совпадает с искомым, заметка будет возвращена\n// \t\tconst getNoteById = id => object.notes.items.find(note => note.id === id)\n\n// \t\t// пробегаемся по распарсенному объекту\n// \t\tfor (const { id, noteIds, title } of object.columns.items) {\n// \t\t\tconst column = new Column(id)\n\n// \t\t\tmountePoint.append(column.element)\n// \t\t\t// вставляем заголовок\n// \t\t\tcolumn.element.querySelector('.column-header').textContent = title\n\n// \t\t\t// пробегаемся по записям\n// \t\t\tfor (const noteId of noteIds) {\n\t\t\t\t\n// \t\t\t\tconst {id, content} = getNoteById(noteId)\n\n// \t\t\t\tconst note = new Note(id, content)\n// \t\t\t\t// Вставляем записи в колонки\n// \t\t\t\tcolumn.add(note)\n// \t\t\t}\n// \t\t}\n\t\t\n// \t}\n\n// \t// Удаление\n// \t// delete () {\n\n// \t// }\n// }","class Column {\n    constructor(id = null) {\n        // создаём константу чтобы использовать её в классической функции с собственным this\n        const instance = this\n        // список всех дочерних заметок\n        this.notes = []\n\n        const element = this.element = document.createElement('div')\n        element.classList.add('column')\n        element.setAttribute('draggable', 'true')\n        element.setAttribute('data-column-id', id ? id : Column.idCounter++)\n        element.innerHTML =\n`<p class=\"column-header\">В плане</p>\n<div data-notes></div>\n<p class=\"column-footer\">\n    <span data-action-addNote class=\"action\">+ Добавить карточку</span>\n</p>`\n        // прослушка кнопки добавления карточки\n        const spanAction_addNote = element.querySelector('[data-action-addNote]')\n\n        spanAction_addNote.addEventListener('click', function (event) {\n            // создаём элемент заметку\n            const note = new Note()\n            // добавляем элемент в список и в разметку\n            instance.add(note)\n\n            element.querySelector('[data-notes]').append(note.element)\n            // при создании карточки сразу идёт её редактирование\n            note.element.setAttribute('contenteditable', 'true')\n            note.element.focus()\n        })\n// редактирование заголовка столбца\n        const headerElement = element.querySelector('.column-header')\n        headerElement.addEventListener('dblclick', function (event) {\n            element.removeAttribute('draggable')\n            headerElement.setAttribute('contenteditable', 'true')\n            headerElement.focus()\n        })\n\n        headerElement.addEventListener('blur', function (event) {\n            headerElement.removeAttribute('contenteditable')\n            element.setAttribute('draggable', 'true')\n// изменили заголовок - сохранили\n            Application.save()\n        })\n        // Прослушка перетаскивания колонки\n        element.addEventListener('dragstart', this.dragstart.bind(this))\n        element.addEventListener('dragend', this.dragend.bind(this))\n        // Слушаем над чем тащим\n        element.addEventListener('dragover', this.dragover.bind(this))\n        // Слушаем куда бросаем\n        element.addEventListener('drop', this.drop.bind(this))\n    }\n\n    add(...notes) {\n        // проходимся по всем заметкам\n        for (const note of notes) {\n            // если они отсутствуют в списке, то добавим\n            if (!this.notes.includes(note)) {\n                this.notes.push(note)\n                // также добавляем в разметку\n                this.element.querySelector('[data-notes]').append(note.element)\n            }\n        }\n    }\n\n    dragstart(event) {\n        // запоминаем перетаскиваемый элемент\n        event.stopPropagation()\n\n        Column.dragged = this.element\n        this.element.classList.add('dragged')\n\n        document\n            .querySelectorAll('.note')\n            .forEach(noteElement => noteElement.removeAttribute('draggable'))\n    }\n\n    dragend(event) {\n        // забываем перетаскиваемый элемент\n        this.element.classList.remove('dragged')\n        Column.dragged = null\n        Column.dropped = null\n\n        document\n            .querySelectorAll('.note')\n            .forEach(noteElement => noteElement.setAttribute('draggable', 'true'))\n// убираем класс у всех когда бросили колонку\n        document\n            .querySelectorAll('.column')\n            .forEach(columnElement => columnElement.classList.remove('under'))\n// перетащили колонку - сохранили\n        Application.save()\n    }\n\n    dragover(event) {\n        // отменяем стандартную обработку при перетаскивании карточки в пустую колонку\n        event.preventDefault()\n        event.stopPropagation()\n// Если перетаскиваем колонку над собой\n        if (Column.dragged === this.element) {\n            if (Column.dropped) {\n                Column.dropped.classList.remove('under')\n            }\n\n            Column.dropped = null\n        }\n\n        if (!Column.dragged || this.element === Column.dragged) {\n            return\n        }\n\n        Column.dropped = this.element\n\n        document\n            .querySelectorAll('.column')\n            .forEach(columnElement => columnElement.classList.remove('under'))\n\n        this.element.classList.add('under')\n    }\n\n    drop(event) {\n        event.stopPropagation()\n// если бросаем карточку\n        if (Note.dragged) {\n            return this.element.querySelector('[data-notes]').append(Note.dragged)\n        }\n        // если бросаем колонку\n        else if (Column.dragged) {\n            const columnsElement = document.querySelector('.columns')\n            const children = Array.from(columnsElement.children)\n            const indexA = children.indexOf(this.element)\n            const indexB = children.indexOf(Column.dragged)\n// меняем порядок соседних колонок в зависимости от перетаскивания \n            if (indexA < indexB) {\n                columnsElement.insertBefore(Column.dragged, this.element)\n            } else {\n                columnsElement.insertBefore(Column.dragged, this.element.nextElementSibling)\n            }\n// Если тащим над пустым местом - снимаем класс UNDER у всех колонок\n            document\n                .querySelectorAll('.column')\n                .forEach(columnElement => columnElement.classList.remove('under'))\n        }\n    }\n}\n// id для следующих клонок\nColumn.idCounter = 4\n// перетаскиваемая колонка\nColumn.dragged = null\n// колонка, над которой бросили\nColumn.dropped = null\n","\r\n $(document).ready(function () {\r\n   /* Scroller */\r\n    $(document).on('click', 'a[href^=\"#anchor\"]', function (event) {\r\n       event.preventDefault();\r\n\r\n       $('html, body').animate({\r\n          scrollTop: $($.attr(this, 'href')).offset().top\r\n       }, 1000);\r\n    });\r\n\r\n });\r\n\r\n // choose only one choice in checkbox\r\n\r\n $('#group input:checkbox').click(function(){\r\n\tif ($(this).is(':checked')) {\r\n\t\t $('#group input:checkbox').not(this).prop('checked', false);\r\n\t}\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n   \r\n\r\n","class Note {\n    constructor(id = null, content = '') {\n        const instance = this\n\n        const element = this.element = document.createElement('div')\n\n        element.classList.add('note')\n        element.setAttribute('draggable', 'true')\n        element.setAttribute('data-note-id', id ? id : Note.idCounter++)\n        element.textContent = content\n        // прослушка на заметке dblclick для редактирования и blur для прекращения\n        element.addEventListener('dblclick', function (event) {\n            element.removeAttribute('draggable')\n            // ищем колонку по родительским элементам использую геттер как поле экземпляра класса\n            instance.column.removeAttribute('draggable')\n            element.setAttribute('contenteditable', 'true')\n            element.focus()\n        })\n\n        element.addEventListener('blur', function (event) {\n            element.removeAttribute('contenteditable')\n            element.setAttribute('draggable', 'true')\n            instance.column.setAttribute('draggable', 'true')\n            // если при потере фокуса у карточки нет контента, то она удаляется\n            if (!element.textContent.trim().length) {\n                element.remove()\n            }\n            // создали заметку - сохранили\n            Application.save()\n        })\n// привязываем this через bind чтобы this ссылался на экземпляр класса, а не на DOM элемент\n        element.addEventListener('dragstart', this.dragstart.bind(this))\n        element.addEventListener('dragend', this.dragend.bind(this))\n        element.addEventListener('dragenter', this.dragenter.bind(this))\n        element.addEventListener('dragover', this.dragover.bind(this))\n        element.addEventListener('dragleave', this.dragleave.bind(this))\n        element.addEventListener('drop', this.drop.bind(this))\n    }\n// геттер можно использовать как поле объекта при вызове\n    get column() {\n        return this.element.closest('.column')\n    }\n// начало перетаскивания элемента\n    dragstart(event) {\n        event.stopPropagation()\n\n        Note.dragged = this.element\n        this.element.classList.add('dragged')\n    }\n// конец перетаскивания элемента\n    dragend(event) {\n        event.stopPropagation()\n\n        Note.dragged = null\n        this.element.classList.remove('dragged')\n\n        document\n            .querySelectorAll('.note')\n            .forEach(x => x.classList.remove('under'))\n        // перетащили карточку - сохранили\n        Application.save()\n    }\n// заносим перетаскиваемый элемент над другим элементом\n    dragenter(event) {\n        // Если перетаскиваем не карточку, \n \t\t// либо если карточку перетаскиваем над той же самой карточкой\n        event.stopPropagation()\n\n        if (!Note.dragged || this.element === Note.dragged) {\n            return\n        }\n\n        this.element.classList.add('under')\n    }\n\n    dragover(event) {\n        event.preventDefault()\n\n        if (!Note.dragged || this.element === Note.dragged) {\n            return\n        }\n    }\n// выносим перетаскиваемый элемент из другого элемента\n    dragleave(event) {\n        event.stopPropagation()\n\n        if (!Note.dragged || this.element === Note.dragged) {\n            return\n        }\n\n        this.element.classList.remove('under')\n    }\n// отпускаем мышку над этим элементом\n    drop(event) {\n        if (!Note.dragged || this.element === Note.dragged) {\n            return\n        }\n        // если переносим в этот же столбец - меняем порядок карточек\n        if (this.element.parentElement === Note.dragged.parentElement) {\n            // находим все элементы в столбце и превращаем в массив\n            const notes = Array.from(this.element.parentElement.querySelectorAll('.note'))\n            const indexA = notes.indexOf(this.element)\n            const indexB = notes.indexOf(Note.dragged)\n            // меняем порядок соседних карточек в зависимости от перетаскивания \n            if (indexA < indexB) {\n                this.element.parentElement.insertBefore(Note.dragged, this.element)\n            } else {\n                this.element.parentElement.insertBefore(Note.dragged, this.element.nextElementSibling)\n            }\n        } \n        // если другой столбец, то вставляем перед той карточкой, над которой дропнули\n        else {\n            this.element.parentElement.insertBefore(Note.dragged, this.element)\n        }\n    }\n}\n// записываем статические поля\n// id для следующих заметок\nNote.idCounter = 8\n// элемент, который перетаскиваем\nNote.dragged = null\n","Application.load()\n\ndocument\n    .querySelector('[data-action-addColumn]')\n    .addEventListener('click', function(event) {\n        document.querySelector('.columns').append(new Column().element)\n        Application.save()\n    })\n\n\n\n\n\n\n \n\n\n"]}